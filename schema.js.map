{"version":3,"sources":["schema.ts"],"names":[],"mappings":"AAAA,gFAAgF;AAChF,mBAAmB;AACnB,yCAAyC;AACzC,EAAE;AACF,EAAE;AACF,wBAAwB;AACxB,kBAAkB;AAClB,EAAE;AACF,EAAE;AACF,uBAAuB;AACvB,kDAAkD;AAClD,EAAE;AACF,EAAE;AACF,4EAA4E;AAC5E,+BAA+B;AAC/B,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACpB,SAAS,SAAS,EAAE,iBAAiB,EAAe,SAAS,EAAE,cAAc,QAAuB,QAAQ;AAE5G,OAAO,IAAM,eAAe,IAAI,WAAY;IAC5C;IAAG;IAAI;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACxD;IAAK;IAAI;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAK;IACrD;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IACrD;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IACpD;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IACvD;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IACpD;IAAK;IAAK;IAAI;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IACxD;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAClD;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAI;IAAK;IACrD;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAK;IAAK;IAAK;IAAG;IAAK;IACpD;IAAK;IAAK;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IACtD;IAAK;IAAI;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IACrD;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IACnD;IAAK;IAAI;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IAAK;IAAK;IAAK;IAClD;IAAK;IAAK;IAAI;IAAK;IAAI;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IACnD;IAAK;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IACtD;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAK;IACnD;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IAAK;IAAK;IAAK;IACvD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IACrD;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAI;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAK;IAClD;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IAAK;IAAK;IAClD;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IACxD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IACrD;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IACpD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAG;IACtD;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IACrD;IAAK;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IACpD;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAK;IACtD;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IAAK;IACrD;IAAK;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IACpD;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IAAK;IAAK;IAAK;IAAI;IACtD;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IACvD;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IACtD;IAAG;C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","file":"schema.js","sourcesContent":["//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//\n//       bebopc version:\n//           3.1.3\n//\n//\n//       bebopc source:\n//           https://github.com/betwixt-labs/bebop\n//\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\nimport { BebopView, BebopRuntimeError, BebopRecord, BebopJson, BebopTypeGuard, Guid, GuidMap } from \"bebop\";\n\nexport const BEBOP_SCHEMA = new Uint8Array ([\n3, 17, 0, 0, 0, 85, 115, 101, 114, 0, 2, 0, 5, 0, 0, 0, 2,\n110, 97, 109, 101, 0, 245, 255, 255, 255, 0, 1, 117, 105,\n100, 0, 245, 255, 255, 255, 0, 2, 83, 101, 115, 115, 105,\n111, 110, 77, 101, 109, 98, 101, 114, 82, 111, 108, 101,\n0, 4, 0, 251, 255, 255, 255, 0, 4, 0, 0, 0, 2, 67, 82, 69,\n65, 84, 79, 82, 0, 0, 1, 0, 0, 0, 77, 69, 77, 66, 69, 82,\n0, 0, 2, 0, 0, 0, 83, 101, 115, 115, 105, 111, 110, 77,\n101, 109, 98, 101, 114, 0, 1, 0, 0, 9, 0, 0, 0, 0, 2, 117,\n115, 101, 114, 0, 0, 0, 0, 0, 0, 114, 111, 108, 101, 0, 1,\n0, 0, 0, 0, 72, 101, 108, 108, 111, 82, 101, 113, 117,\n101, 115, 116, 0, 2, 0, 5, 0, 0, 0, 2, 110, 97, 109, 101,\n0, 245, 255, 255, 255, 0, 1, 117, 105, 100, 0, 245, 255,\n255, 255, 0, 2, 83, 101, 115, 115, 105, 111, 110, 67, 114,\n101, 97, 116, 101, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 83, 101,\n115, 115, 105, 111, 110, 68, 101, 108, 101, 116, 101, 0,\n1, 0, 0, 0, 0, 0, 0, 1, 0, 83, 101, 115, 115, 105, 111,\n110, 74, 111, 105, 110, 0, 1, 0, 0, 4, 0, 0, 0, 0, 1, 105,\n100, 0, 245, 255, 255, 255, 0, 83, 101, 115, 115, 105,\n111, 110, 76, 101, 97, 118, 101, 0, 1, 0, 0, 0, 0, 0, 0,\n1, 0, 83, 101, 115, 115, 105, 111, 110, 71, 101, 116, 0,\n1, 0, 0, 0, 0, 0, 0, 1, 0, 67, 117, 114, 114, 101, 110,\n116, 83, 111, 110, 103, 86, 101, 114, 115, 101, 0, 1, 0,\n0, 5, 0, 0, 0, 0, 2, 115, 111, 110, 103, 72, 97, 115, 104,\n0, 245, 255, 255, 255, 0, 118, 101, 114, 115, 101, 73,\n100, 120, 0, 254, 255, 255, 255, 0, 67, 111, 109, 109, 97,\n110, 100, 0, 3, 0, 5, 0, 0, 0, 7, 1, 3, 0, 0, 0, 2, 4, 0,\n0, 0, 3, 5, 0, 0, 0, 4, 6, 0, 0, 0, 5, 7, 0, 0, 0, 6, 8,\n0, 0, 0, 7, 9, 0, 0, 0, 73, 110, 102, 111, 0, 1, 0, 0, 4,\n0, 0, 0, 0, 1, 116, 101, 120, 116, 0, 245, 255, 255, 255,\n0, 69, 114, 114, 111, 114, 0, 1, 0, 0, 5, 0, 0, 0, 0, 2,\n99, 111, 100, 101, 0, 254, 255, 255, 255, 0, 116, 101,\n120, 116, 0, 245, 255, 255, 255, 0, 72, 101, 108, 108,\n111, 82, 101, 115, 112, 111, 110, 115, 101, 0, 1, 0, 0, 4,\n0, 0, 0, 0, 1, 117, 105, 100, 0, 245, 255, 255, 255, 0,\n83, 101, 115, 115, 105, 111, 110, 68, 101, 116, 97, 105,\n108, 115, 0, 1, 0, 0, 16, 0, 0, 0, 0, 3, 105, 100, 0, 245,\n255, 255, 255, 0, 101, 120, 112, 105, 114, 101, 115, 0,\n243, 255, 255, 255, 0, 109, 101, 109, 98, 101, 114, 115,\n0, 242, 255, 255, 255, 0, 2, 0, 0, 0, 0, 77, 97, 114, 107,\n83, 111, 110, 103, 86, 101, 114, 115, 101, 0, 1, 0, 0, 5,\n0, 0, 0, 0, 2, 115, 111, 110, 103, 72, 97, 115, 104, 0,\n245, 255, 255, 255, 0, 118, 101, 114, 115, 101, 73, 100,\n120, 0, 254, 255, 255, 255, 0, 77, 101, 115, 115, 97, 103,\n101, 0, 3, 0, 9, 0, 0, 0, 5, 1, 11, 0, 0, 0, 2, 12, 0, 0,\n0, 3, 13, 0, 0, 0, 4, 14, 0, 0, 0, 5, 15, 0, 0, 0, 0, 0,\n0, 0\n]);\n\nexport interface IUser extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class User implements IUser {\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IUser) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return User.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IUser): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    User.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link User}.\n   */\n  public static validateCompatibility(record: IUser): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link User} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IUser {\n      return new User(record);\n  }\n\n  /**\n   * Creates a new {@link User} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IUser {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`User.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    User.validateCompatibility(parsed);\n    return User.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return User.encode(this);\n  }\n\n  public static encode(record: IUser): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    User.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IUser, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IUser {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return User.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IUser {\n    let message: IUser = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new User(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new User(message);\n      }\n    }\n  }\n}\n\n\nexport enum SessionMemberRole {\n\n  Creator = 1,\n\n  Member = 2,\n}\n\n\nexport interface ISessionMember extends BebopRecord {\n\n  readonly user: IUser;\n\n  readonly role: SessionMemberRole;\n}\n\nexport class SessionMember implements ISessionMember {\n  public readonly user: IUser;\n  public readonly role: SessionMemberRole;\n\n  constructor(record: ISessionMember) {\n    this.user = record.user;\n    this.role = record.role;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionMember.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionMember): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionMember.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionMember}.\n   */\n  public static validateCompatibility(record: ISessionMember): void {\n    User.validateCompatibility(record.user);\n    BebopTypeGuard.ensureEnum(record.role, SessionMemberRole);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionMember} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionMember {\n      record.user = User.unsafeCast(record.user);\n      return new SessionMember(record);\n  }\n\n  /**\n   * Creates a new {@link SessionMember} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionMember {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionMember.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionMember.validateCompatibility(parsed);\n    return SessionMember.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionMember.encode(this);\n  }\n\n  public static encode(record: ISessionMember): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionMember.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionMember, view: BebopView): number {\n    const before = view.length;\n    User.encodeInto(record.user, view)\n    view.writeUint32(record.role);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionMember {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionMember.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionMember {\n    let field0: IUser;\n    field0 = User.readFrom(view);\n    let field1: SessionMemberRole;\n    field1 = view.readUint32() as SessionMemberRole;\n    let message: ISessionMember = {\n      user: field0,\n      role: field1,\n    };\n    return new SessionMember(message);\n  }\n}\n\n\nexport interface IHelloRequest extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class HelloRequest implements IHelloRequest {\n  public readonly discriminator: number = 1 as 1;\n  public static readonly discriminator: number = 1 as 1;\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IHelloRequest) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return HelloRequest.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IHelloRequest): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    HelloRequest.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link HelloRequest}.\n   */\n  public static validateCompatibility(record: IHelloRequest): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link HelloRequest} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IHelloRequest {\n      return new HelloRequest(record);\n  }\n\n  /**\n   * Creates a new {@link HelloRequest} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IHelloRequest {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`HelloRequest.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    HelloRequest.validateCompatibility(parsed);\n    return HelloRequest.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return HelloRequest.encode(this);\n  }\n\n  public static encode(record: IHelloRequest): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    HelloRequest.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IHelloRequest, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IHelloRequest {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return HelloRequest.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IHelloRequest {\n    let message: IHelloRequest = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new HelloRequest(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new HelloRequest(message);\n      }\n    }\n  }\n}\n\n\nexport interface ISessionCreate extends BebopRecord {\n}\n\nexport class SessionCreate implements ISessionCreate {\n  public readonly discriminator: number = 2 as 2;\n  public static readonly discriminator: number = 2 as 2;\n\n  constructor(record: ISessionCreate) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionCreate.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionCreate): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionCreate.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionCreate}.\n   */\n  public static validateCompatibility(record: ISessionCreate): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionCreate} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionCreate {\n      return new SessionCreate(record);\n  }\n\n  /**\n   * Creates a new {@link SessionCreate} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionCreate {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionCreate.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionCreate.validateCompatibility(parsed);\n    return SessionCreate.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionCreate.encode(this);\n  }\n\n  public static encode(record: ISessionCreate): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionCreate.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionCreate, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionCreate {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionCreate.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionCreate {\n    let message: ISessionCreate = {\n    };\n    return new SessionCreate(message);\n  }\n}\n\n\nexport interface ISessionDelete extends BebopRecord {\n}\n\nexport class SessionDelete implements ISessionDelete {\n  public readonly discriminator: number = 3 as 3;\n  public static readonly discriminator: number = 3 as 3;\n\n  constructor(record: ISessionDelete) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionDelete.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionDelete): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionDelete.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionDelete}.\n   */\n  public static validateCompatibility(record: ISessionDelete): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionDelete} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionDelete {\n      return new SessionDelete(record);\n  }\n\n  /**\n   * Creates a new {@link SessionDelete} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionDelete {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionDelete.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionDelete.validateCompatibility(parsed);\n    return SessionDelete.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionDelete.encode(this);\n  }\n\n  public static encode(record: ISessionDelete): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionDelete.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionDelete, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionDelete {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionDelete.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionDelete {\n    let message: ISessionDelete = {\n    };\n    return new SessionDelete(message);\n  }\n}\n\n\nexport interface ISessionJoin extends BebopRecord {\n\n  readonly id: string;\n}\n\nexport class SessionJoin implements ISessionJoin {\n  public readonly discriminator: number = 4 as 4;\n  public static readonly discriminator: number = 4 as 4;\n  public readonly id: string;\n\n  constructor(record: ISessionJoin) {\n    this.id = record.id;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionJoin.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionJoin): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionJoin.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionJoin}.\n   */\n  public static validateCompatibility(record: ISessionJoin): void {\n    BebopTypeGuard.ensureString(record.id)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionJoin} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionJoin {\n      return new SessionJoin(record);\n  }\n\n  /**\n   * Creates a new {@link SessionJoin} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionJoin {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionJoin.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionJoin.validateCompatibility(parsed);\n    return SessionJoin.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionJoin.encode(this);\n  }\n\n  public static encode(record: ISessionJoin): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionJoin.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionJoin, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.id);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionJoin {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionJoin.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionJoin {\n    let field0: string;\n    field0 = view.readString();\n    let message: ISessionJoin = {\n      id: field0,\n    };\n    return new SessionJoin(message);\n  }\n}\n\n\nexport interface ISessionLeave extends BebopRecord {\n}\n\nexport class SessionLeave implements ISessionLeave {\n  public readonly discriminator: number = 5 as 5;\n  public static readonly discriminator: number = 5 as 5;\n\n  constructor(record: ISessionLeave) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionLeave.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionLeave): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionLeave.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionLeave}.\n   */\n  public static validateCompatibility(record: ISessionLeave): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionLeave} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionLeave {\n      return new SessionLeave(record);\n  }\n\n  /**\n   * Creates a new {@link SessionLeave} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionLeave {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionLeave.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionLeave.validateCompatibility(parsed);\n    return SessionLeave.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionLeave.encode(this);\n  }\n\n  public static encode(record: ISessionLeave): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionLeave.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionLeave, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionLeave {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionLeave.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionLeave {\n    let message: ISessionLeave = {\n    };\n    return new SessionLeave(message);\n  }\n}\n\n\nexport interface ISessionGet extends BebopRecord {\n}\n\nexport class SessionGet implements ISessionGet {\n  public readonly discriminator: number = 6 as 6;\n  public static readonly discriminator: number = 6 as 6;\n\n  constructor(record: ISessionGet) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionGet.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionGet): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionGet.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionGet}.\n   */\n  public static validateCompatibility(record: ISessionGet): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionGet} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionGet {\n      return new SessionGet(record);\n  }\n\n  /**\n   * Creates a new {@link SessionGet} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionGet {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionGet.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionGet.validateCompatibility(parsed);\n    return SessionGet.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionGet.encode(this);\n  }\n\n  public static encode(record: ISessionGet): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionGet.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionGet, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionGet {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionGet.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionGet {\n    let message: ISessionGet = {\n    };\n    return new SessionGet(message);\n  }\n}\n\n\nexport interface ICurrentSongVerse extends BebopRecord {\n\n  readonly songHash: string;\n\n  readonly verseIdx: number;\n}\n\nexport class CurrentSongVerse implements ICurrentSongVerse {\n  public readonly discriminator: number = 7 as 7;\n  public static readonly discriminator: number = 7 as 7;\n  public readonly songHash: string;\n  public readonly verseIdx: number;\n\n  constructor(record: ICurrentSongVerse) {\n    this.songHash = record.songHash;\n    this.verseIdx = record.verseIdx;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return CurrentSongVerse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICurrentSongVerse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    CurrentSongVerse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link CurrentSongVerse}.\n   */\n  public static validateCompatibility(record: ICurrentSongVerse): void {\n    BebopTypeGuard.ensureString(record.songHash)\n    BebopTypeGuard.ensureUint8(record.verseIdx)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link CurrentSongVerse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ICurrentSongVerse {\n      return new CurrentSongVerse(record);\n  }\n\n  /**\n   * Creates a new {@link CurrentSongVerse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ICurrentSongVerse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`CurrentSongVerse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    CurrentSongVerse.validateCompatibility(parsed);\n    return CurrentSongVerse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return CurrentSongVerse.encode(this);\n  }\n\n  public static encode(record: ICurrentSongVerse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    CurrentSongVerse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICurrentSongVerse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.songHash);\n    view.writeByte(record.verseIdx);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ICurrentSongVerse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return CurrentSongVerse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ICurrentSongVerse {\n    let field0: string;\n    field0 = view.readString();\n    let field1: number;\n    field1 = view.readByte();\n    let message: ICurrentSongVerse = {\n      songHash: field0,\n      verseIdx: field1,\n    };\n    return new CurrentSongVerse(message);\n  }\n}\n\n\nexport type ICommandType\n  = { discriminator: 1, value: IHelloRequest }\n  | { discriminator: 2, value: ISessionCreate }\n  | { discriminator: 3, value: ISessionDelete }\n  | { discriminator: 4, value: ISessionJoin }\n  | { discriminator: 5, value: ISessionLeave }\n  | { discriminator: 6, value: ISessionGet }\n  | { discriminator: 7, value: ICurrentSongVerse };\n\nexport interface ICommand extends BebopRecord {\n  readonly data: ICommandType;\n}\nexport class Command implements ICommand {\n\n  public readonly data: ICommandType;\n\n  private constructor(data: ICommandType) {\n    this.data = data;\n  }\n\n  public get discriminator() {\n    return this.data.discriminator;\n  }\n\n  public get value() {\n    return this.data.value;\n  }\n\n  public static fromHelloRequest(value: IHelloRequest) {\n    return new Command({ discriminator: 1, value: new HelloRequest(value)});\n  }\n\n  public isHelloRequest(): this is { value: HelloRequest } & { data: Extract<ICommandType, { discriminator: 1 }> } {\n    return this.data.value instanceof HelloRequest;\n  }\n\n  public static fromSessionCreate(value: ISessionCreate) {\n    return new Command({ discriminator: 2, value: new SessionCreate(value)});\n  }\n\n  public isSessionCreate(): this is { value: SessionCreate } & { data: Extract<ICommandType, { discriminator: 2 }> } {\n    return this.data.value instanceof SessionCreate;\n  }\n\n  public static fromSessionDelete(value: ISessionDelete) {\n    return new Command({ discriminator: 3, value: new SessionDelete(value)});\n  }\n\n  public isSessionDelete(): this is { value: SessionDelete } & { data: Extract<ICommandType, { discriminator: 3 }> } {\n    return this.data.value instanceof SessionDelete;\n  }\n\n  public static fromSessionJoin(value: ISessionJoin) {\n    return new Command({ discriminator: 4, value: new SessionJoin(value)});\n  }\n\n  public isSessionJoin(): this is { value: SessionJoin } & { data: Extract<ICommandType, { discriminator: 4 }> } {\n    return this.data.value instanceof SessionJoin;\n  }\n\n  public static fromSessionLeave(value: ISessionLeave) {\n    return new Command({ discriminator: 5, value: new SessionLeave(value)});\n  }\n\n  public isSessionLeave(): this is { value: SessionLeave } & { data: Extract<ICommandType, { discriminator: 5 }> } {\n    return this.data.value instanceof SessionLeave;\n  }\n\n  public static fromSessionGet(value: ISessionGet) {\n    return new Command({ discriminator: 6, value: new SessionGet(value)});\n  }\n\n  public isSessionGet(): this is { value: SessionGet } & { data: Extract<ICommandType, { discriminator: 6 }> } {\n    return this.data.value instanceof SessionGet;\n  }\n\n  public static fromCurrentSongVerse(value: ICurrentSongVerse) {\n    return new Command({ discriminator: 7, value: new CurrentSongVerse(value)});\n  }\n\n  public isCurrentSongVerse(): this is { value: CurrentSongVerse } & { data: Extract<ICommandType, { discriminator: 7 }> } {\n    return this.data.value instanceof CurrentSongVerse;\n  }\n\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Command.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICommand): string {\n    delete (record.data.value as any).discriminator;\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Command.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Command}.\n   */\n  public static validateCompatibility(record: ICommand): void {\n    const discriminator = record.data.discriminator;\n    BebopTypeGuard.ensureUint8(discriminator);\n    switch (discriminator) {\n      case 1: {\n        HelloRequest.validateCompatibility(record.data.value);\n        break;\n      }\n      case 2: {\n        SessionCreate.validateCompatibility(record.data.value);\n        break;\n      }\n      case 3: {\n        SessionDelete.validateCompatibility(record.data.value);\n        break;\n      }\n      case 4: {\n        SessionJoin.validateCompatibility(record.data.value);\n        break;\n      }\n      case 5: {\n        SessionLeave.validateCompatibility(record.data.value);\n        break;\n      }\n      case 6: {\n        SessionGet.validateCompatibility(record.data.value);\n        break;\n      }\n      case 7: {\n        CurrentSongVerse.validateCompatibility(record.data.value);\n        break;\n      }\n      default: {\n        throw new Error(`Unknown discriminator for Command: ${discriminator}`);\n      }\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Command} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): Command {\n      const discriminator = record.data.discriminator;\n      switch (discriminator) {\n        case 1: {\n          return new Command({ discriminator: 1, value: HelloRequest.unsafeCast(record.value) });\n        }\n        case 2: {\n          return new Command({ discriminator: 2, value: SessionCreate.unsafeCast(record.value) });\n        }\n        case 3: {\n          return new Command({ discriminator: 3, value: SessionDelete.unsafeCast(record.value) });\n        }\n        case 4: {\n          return new Command({ discriminator: 4, value: SessionJoin.unsafeCast(record.value) });\n        }\n        case 5: {\n          return new Command({ discriminator: 5, value: SessionLeave.unsafeCast(record.value) });\n        }\n        case 6: {\n          return new Command({ discriminator: 6, value: SessionGet.unsafeCast(record.value) });\n        }\n        case 7: {\n          return new Command({ discriminator: 7, value: CurrentSongVerse.unsafeCast(record.value) });\n        }\n      }\n      throw new BebopRuntimeError(`Failed to unsafely cast union from discriminator: ${discriminator}`);\n  }\n\n  /**\n   * Creates a new {@link Command} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): Command {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Command.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Command.validateCompatibility(parsed);\n    return Command.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Command.encode(this);\n  }\n\n  public static encode(record: ICommand): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Command.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICommand, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length + 1;\n    view.writeByte(record.data.discriminator);\n    switch (record.data.discriminator) {\n      case 1:\n        HelloRequest.encodeInto(record.data.value, view);\n        break;\n      case 2:\n        SessionCreate.encodeInto(record.data.value, view);\n        break;\n      case 3:\n        SessionDelete.encodeInto(record.data.value, view);\n        break;\n      case 4:\n        SessionJoin.encodeInto(record.data.value, view);\n        break;\n      case 5:\n        SessionLeave.encodeInto(record.data.value, view);\n        break;\n      case 6:\n        SessionGet.encodeInto(record.data.value, view);\n        break;\n      case 7:\n        CurrentSongVerse.encodeInto(record.data.value, view);\n        break;\n    }\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): Command {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Command.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): Command {\n    const length = view.readMessageLength();\n    const end = view.index + 1 + length;\n    switch (view.readByte()) {\n      case 1:\n        return this.fromHelloRequest(HelloRequest.readFrom(view));\n      case 2:\n        return this.fromSessionCreate(SessionCreate.readFrom(view));\n      case 3:\n        return this.fromSessionDelete(SessionDelete.readFrom(view));\n      case 4:\n        return this.fromSessionJoin(SessionJoin.readFrom(view));\n      case 5:\n        return this.fromSessionLeave(SessionLeave.readFrom(view));\n      case 6:\n        return this.fromSessionGet(SessionGet.readFrom(view));\n      case 7:\n        return this.fromCurrentSongVerse(CurrentSongVerse.readFrom(view));\n      default:\n        view.index = end;\n        throw new BebopRuntimeError(\"Unrecognized discriminator while decoding Command\");\n    }\n  }\n}\n\n\nexport interface IInfo extends BebopRecord {\n\n  readonly text: string;\n}\n\nexport class Info implements IInfo {\n  public readonly discriminator: number = 1 as 1;\n  public static readonly discriminator: number = 1 as 1;\n  public readonly text: string;\n\n  constructor(record: IInfo) {\n    this.text = record.text;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Info.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IInfo): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Info.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Info}.\n   */\n  public static validateCompatibility(record: IInfo): void {\n    BebopTypeGuard.ensureString(record.text)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Info} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IInfo {\n      return new Info(record);\n  }\n\n  /**\n   * Creates a new {@link Info} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IInfo {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Info.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Info.validateCompatibility(parsed);\n    return Info.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Info.encode(this);\n  }\n\n  public static encode(record: IInfo): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Info.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IInfo, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.text);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IInfo {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Info.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IInfo {\n    let field0: string;\n    field0 = view.readString();\n    let message: IInfo = {\n      text: field0,\n    };\n    return new Info(message);\n  }\n}\n\n\nexport interface IError extends BebopRecord {\n\n  readonly code: number;\n\n  readonly text: string;\n}\n\nexport class Error implements IError {\n  public readonly discriminator: number = 2 as 2;\n  public static readonly discriminator: number = 2 as 2;\n  public readonly code: number;\n  public readonly text: string;\n\n  constructor(record: IError) {\n    this.code = record.code;\n    this.text = record.text;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Error.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IError): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Error.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Error}.\n   */\n  public static validateCompatibility(record: IError): void {\n    BebopTypeGuard.ensureUint8(record.code)\n    BebopTypeGuard.ensureString(record.text)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Error} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IError {\n      return new Error(record);\n  }\n\n  /**\n   * Creates a new {@link Error} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IError {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Error.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Error.validateCompatibility(parsed);\n    return Error.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Error.encode(this);\n  }\n\n  public static encode(record: IError): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Error.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IError, view: BebopView): number {\n    const before = view.length;\n    view.writeByte(record.code);\n    view.writeString(record.text);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IError {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Error.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IError {\n    let field0: number;\n    field0 = view.readByte();\n    let field1: string;\n    field1 = view.readString();\n    let message: IError = {\n      code: field0,\n      text: field1,\n    };\n    return new Error(message);\n  }\n}\n\n\nexport interface IHelloResponse extends BebopRecord {\n\n  readonly uid: string;\n}\n\nexport class HelloResponse implements IHelloResponse {\n  public readonly discriminator: number = 3 as 3;\n  public static readonly discriminator: number = 3 as 3;\n  public readonly uid: string;\n\n  constructor(record: IHelloResponse) {\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return HelloResponse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IHelloResponse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    HelloResponse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link HelloResponse}.\n   */\n  public static validateCompatibility(record: IHelloResponse): void {\n    BebopTypeGuard.ensureString(record.uid)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link HelloResponse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IHelloResponse {\n      return new HelloResponse(record);\n  }\n\n  /**\n   * Creates a new {@link HelloResponse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IHelloResponse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`HelloResponse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    HelloResponse.validateCompatibility(parsed);\n    return HelloResponse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return HelloResponse.encode(this);\n  }\n\n  public static encode(record: IHelloResponse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    HelloResponse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IHelloResponse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.uid);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IHelloResponse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return HelloResponse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IHelloResponse {\n    let field0: string;\n    field0 = view.readString();\n    let message: IHelloResponse = {\n      uid: field0,\n    };\n    return new HelloResponse(message);\n  }\n}\n\n\nexport interface ISessionDetails extends BebopRecord {\n\n  readonly id: string;\n\n  readonly expires: Date;\n\n  readonly members: Array<ISessionMember>;\n}\n\nexport class SessionDetails implements ISessionDetails {\n  public readonly discriminator: number = 4 as 4;\n  public static readonly discriminator: number = 4 as 4;\n  public readonly id: string;\n  public readonly expires: Date;\n  public readonly members: Array<ISessionMember>;\n\n  constructor(record: ISessionDetails) {\n    this.id = record.id;\n    this.expires = record.expires;\n    this.members = record.members;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionDetails.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionDetails): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionDetails.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionDetails}.\n   */\n  public static validateCompatibility(record: ISessionDetails): void {\n    BebopTypeGuard.ensureString(record.id)\n    BebopTypeGuard.ensureDate(record.expires)\n    BebopTypeGuard.ensureArray(record.members, SessionMember.validateCompatibility);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionDetails} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionDetails {\n      return new SessionDetails(record);\n  }\n\n  /**\n   * Creates a new {@link SessionDetails} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionDetails {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionDetails.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionDetails.validateCompatibility(parsed);\n    return SessionDetails.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionDetails.encode(this);\n  }\n\n  public static encode(record: ISessionDetails): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionDetails.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionDetails, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.id);\n    view.writeDate(record.expires);\n    {\n      const length0 = record.members.length;\n      view.writeUint32(length0);\n      for (let i0 = 0; i0 < length0; i0++) {\n        SessionMember.encodeInto(record.members[i0], view)\n      }\n    }\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionDetails {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionDetails.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionDetails {\n    let field0: string;\n    field0 = view.readString();\n    let field1: Date;\n    field1 = view.readDate();\n    let field2: Array<ISessionMember>;\n    {\n      let length0 = view.readUint32();\n      field2 = new Array<ISessionMember>(length0);\n      for (let i0 = 0; i0 < length0; i0++) {\n        let x0: ISessionMember;\n        x0 = SessionMember.readFrom(view);\n        field2[i0] = x0;\n      }\n    }\n    let message: ISessionDetails = {\n      id: field0,\n      expires: field1,\n      members: field2,\n    };\n    return new SessionDetails(message);\n  }\n}\n\n\nexport interface IMarkSongVerse extends BebopRecord {\n\n  readonly songHash: string;\n\n  readonly verseIdx: number;\n}\n\nexport class MarkSongVerse implements IMarkSongVerse {\n  public readonly discriminator: number = 5 as 5;\n  public static readonly discriminator: number = 5 as 5;\n  public readonly songHash: string;\n  public readonly verseIdx: number;\n\n  constructor(record: IMarkSongVerse) {\n    this.songHash = record.songHash;\n    this.verseIdx = record.verseIdx;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return MarkSongVerse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IMarkSongVerse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    MarkSongVerse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link MarkSongVerse}.\n   */\n  public static validateCompatibility(record: IMarkSongVerse): void {\n    BebopTypeGuard.ensureString(record.songHash)\n    BebopTypeGuard.ensureUint8(record.verseIdx)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link MarkSongVerse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IMarkSongVerse {\n      return new MarkSongVerse(record);\n  }\n\n  /**\n   * Creates a new {@link MarkSongVerse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IMarkSongVerse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`MarkSongVerse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    MarkSongVerse.validateCompatibility(parsed);\n    return MarkSongVerse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return MarkSongVerse.encode(this);\n  }\n\n  public static encode(record: IMarkSongVerse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    MarkSongVerse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IMarkSongVerse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.songHash);\n    view.writeByte(record.verseIdx);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IMarkSongVerse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return MarkSongVerse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IMarkSongVerse {\n    let field0: string;\n    field0 = view.readString();\n    let field1: number;\n    field1 = view.readByte();\n    let message: IMarkSongVerse = {\n      songHash: field0,\n      verseIdx: field1,\n    };\n    return new MarkSongVerse(message);\n  }\n}\n\n\nexport type IMessageType\n  = { discriminator: 1, value: IInfo }\n  | { discriminator: 2, value: IError }\n  | { discriminator: 3, value: IHelloResponse }\n  | { discriminator: 4, value: ISessionDetails }\n  | { discriminator: 5, value: IMarkSongVerse };\n\nexport interface IMessage extends BebopRecord {\n  readonly data: IMessageType;\n}\nexport class Message implements IMessage {\n\n  public readonly data: IMessageType;\n\n  private constructor(data: IMessageType) {\n    this.data = data;\n  }\n\n  public get discriminator() {\n    return this.data.discriminator;\n  }\n\n  public get value() {\n    return this.data.value;\n  }\n\n  public static fromInfo(value: IInfo) {\n    return new Message({ discriminator: 1, value: new Info(value)});\n  }\n\n  public isInfo(): this is { value: Info } & { data: Extract<IMessageType, { discriminator: 1 }> } {\n    return this.data.value instanceof Info;\n  }\n\n  public static fromError(value: IError) {\n    return new Message({ discriminator: 2, value: new Error(value)});\n  }\n\n  public isError(): this is { value: Error } & { data: Extract<IMessageType, { discriminator: 2 }> } {\n    return this.data.value instanceof Error;\n  }\n\n  public static fromHelloResponse(value: IHelloResponse) {\n    return new Message({ discriminator: 3, value: new HelloResponse(value)});\n  }\n\n  public isHelloResponse(): this is { value: HelloResponse } & { data: Extract<IMessageType, { discriminator: 3 }> } {\n    return this.data.value instanceof HelloResponse;\n  }\n\n  public static fromSessionDetails(value: ISessionDetails) {\n    return new Message({ discriminator: 4, value: new SessionDetails(value)});\n  }\n\n  public isSessionDetails(): this is { value: SessionDetails } & { data: Extract<IMessageType, { discriminator: 4 }> } {\n    return this.data.value instanceof SessionDetails;\n  }\n\n  public static fromMarkSongVerse(value: IMarkSongVerse) {\n    return new Message({ discriminator: 5, value: new MarkSongVerse(value)});\n  }\n\n  public isMarkSongVerse(): this is { value: MarkSongVerse } & { data: Extract<IMessageType, { discriminator: 5 }> } {\n    return this.data.value instanceof MarkSongVerse;\n  }\n\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Message.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IMessage): string {\n    delete (record.data.value as any).discriminator;\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Message.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Message}.\n   */\n  public static validateCompatibility(record: IMessage): void {\n    const discriminator = record.data.discriminator;\n    BebopTypeGuard.ensureUint8(discriminator);\n    switch (discriminator) {\n      case 1: {\n        Info.validateCompatibility(record.data.value);\n        break;\n      }\n      case 2: {\n        Error.validateCompatibility(record.data.value);\n        break;\n      }\n      case 3: {\n        HelloResponse.validateCompatibility(record.data.value);\n        break;\n      }\n      case 4: {\n        SessionDetails.validateCompatibility(record.data.value);\n        break;\n      }\n      case 5: {\n        MarkSongVerse.validateCompatibility(record.data.value);\n        break;\n      }\n      default: {\n        throw new Error(`Unknown discriminator for Message: ${discriminator}`);\n      }\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Message} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): Message {\n      const discriminator = record.data.discriminator;\n      switch (discriminator) {\n        case 1: {\n          return new Message({ discriminator: 1, value: Info.unsafeCast(record.value) });\n        }\n        case 2: {\n          return new Message({ discriminator: 2, value: Error.unsafeCast(record.value) });\n        }\n        case 3: {\n          return new Message({ discriminator: 3, value: HelloResponse.unsafeCast(record.value) });\n        }\n        case 4: {\n          return new Message({ discriminator: 4, value: SessionDetails.unsafeCast(record.value) });\n        }\n        case 5: {\n          return new Message({ discriminator: 5, value: MarkSongVerse.unsafeCast(record.value) });\n        }\n      }\n      throw new BebopRuntimeError(`Failed to unsafely cast union from discriminator: ${discriminator}`);\n  }\n\n  /**\n   * Creates a new {@link Message} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): Message {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Message.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Message.validateCompatibility(parsed);\n    return Message.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Message.encode(this);\n  }\n\n  public static encode(record: IMessage): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Message.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IMessage, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length + 1;\n    view.writeByte(record.data.discriminator);\n    switch (record.data.discriminator) {\n      case 1:\n        Info.encodeInto(record.data.value, view);\n        break;\n      case 2:\n        Error.encodeInto(record.data.value, view);\n        break;\n      case 3:\n        HelloResponse.encodeInto(record.data.value, view);\n        break;\n      case 4:\n        SessionDetails.encodeInto(record.data.value, view);\n        break;\n      case 5:\n        MarkSongVerse.encodeInto(record.data.value, view);\n        break;\n    }\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): Message {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Message.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): Message {\n    const length = view.readMessageLength();\n    const end = view.index + 1 + length;\n    switch (view.readByte()) {\n      case 1:\n        return this.fromInfo(Info.readFrom(view));\n      case 2:\n        return this.fromError(Error.readFrom(view));\n      case 3:\n        return this.fromHelloResponse(HelloResponse.readFrom(view));\n      case 4:\n        return this.fromSessionDetails(SessionDetails.readFrom(view));\n      case 5:\n        return this.fromMarkSongVerse(MarkSongVerse.readFrom(view));\n      default:\n        view.index = end;\n        throw new BebopRuntimeError(\"Unrecognized discriminator while decoding Message\");\n    }\n  }\n}\n\n"]}