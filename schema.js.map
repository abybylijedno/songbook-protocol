{"version":3,"sources":["schema.ts"],"names":[],"mappings":"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,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EACvD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EACxD,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GACvD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GACvD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACvD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,IAAK,IACpD,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EACxD,EAAG,EAA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","file":"schema.js","sourcesContent":["//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//\n//       bebopc version:\n//           3.1.3\n//\n//\n//       bebopc source:\n//           https://github.com/betwixt-labs/bebop\n//\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\nimport { BebopView, BebopRuntimeError, BebopRecord, BebopJson, BebopTypeGuard, Guid, GuidMap } from \"bebop\";\n\nexport const BEBOP_SCHEMA = new Uint8Array ([\n3, 19, 0, 0, 0, 85, 115, 101, 114, 0, 2, 0, 5, 0, 0, 0, 2,\n110, 97, 109, 101, 0, 245, 255, 255, 255, 0, 1, 117, 105,\n100, 0, 245, 255, 255, 255, 0, 2, 83, 101, 115, 115, 105,\n111, 110, 77, 101, 109, 98, 101, 114, 82, 111, 108, 101,\n0, 4, 0, 251, 255, 255, 255, 0, 4, 0, 0, 0, 2, 67, 82, 69,\n65, 84, 79, 82, 0, 0, 1, 0, 0, 0, 77, 69, 77, 66, 69, 82,\n0, 0, 2, 0, 0, 0, 83, 101, 115, 115, 105, 111, 110, 77,\n101, 109, 98, 101, 114, 0, 1, 0, 0, 9, 0, 0, 0, 0, 2, 117,\n115, 101, 114, 0, 0, 0, 0, 0, 0, 114, 111, 108, 101, 0, 1,\n0, 0, 0, 0, 83, 101, 115, 115, 105, 111, 110, 68, 101,\n108, 101, 116, 101, 82, 101, 97, 115, 111, 110, 0, 4, 0,\n251, 255, 255, 255, 0, 4, 0, 0, 0, 3, 69, 88, 80, 73, 82,\n69, 68, 0, 0, 1, 0, 0, 0, 67, 82, 69, 65, 84, 79, 82, 83,\n95, 68, 69, 67, 73, 83, 73, 79, 78, 0, 0, 2, 0, 0, 0, 85,\n83, 69, 82, 95, 76, 69, 70, 84, 0, 0, 3, 0, 0, 0, 69, 114,\n114, 111, 114, 67, 111, 100, 101, 0, 4, 0, 251, 255, 255,\n255, 0, 4, 0, 0, 0, 14, 85, 78, 75, 78, 79, 87, 78, 0, 0,\n1, 0, 0, 0, 73, 78, 86, 65, 76, 73, 68, 95, 67, 79, 77,\n77, 65, 78, 68, 0, 0, 2, 0, 0, 0, 83, 69, 83, 83, 73, 79,\n78, 95, 78, 79, 84, 95, 70, 79, 85, 78, 68, 0, 0, 3, 0, 0,\n0, 83, 69, 83, 83, 73, 79, 78, 95, 73, 68, 95, 82, 69, 81,\n85, 73, 82, 69, 68, 0, 0, 4, 0, 0, 0, 83, 69, 83, 83, 73,\n79, 78, 95, 89, 79, 85, 95, 72, 65, 86, 69, 95, 79, 78,\n69, 0, 0, 5, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 89,\n79, 85, 95, 72, 65, 86, 69, 95, 78, 79, 78, 69, 0, 0, 6,\n0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 89, 79, 85, 95,\n65, 82, 69, 95, 78, 79, 84, 95, 67, 82, 69, 65, 84, 79,\n82, 0, 0, 7, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 89,\n79, 85, 95, 65, 82, 69, 95, 78, 79, 84, 95, 77, 69, 77,\n66, 69, 82, 0, 0, 8, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78,\n95, 67, 65, 78, 78, 79, 84, 95, 76, 69, 65, 86, 69, 95,\n65, 83, 95, 67, 82, 69, 65, 84, 79, 82, 0, 0, 9, 0, 0, 0,\n83, 79, 78, 71, 95, 78, 79, 84, 95, 70, 79, 85, 78, 68, 0,\n0, 10, 0, 0, 0, 83, 79, 78, 71, 95, 72, 65, 83, 72, 95,\n82, 69, 81, 85, 73, 82, 69, 68, 0, 0, 11, 0, 0, 0, 83, 79,\n78, 71, 95, 86, 69, 82, 83, 69, 95, 73, 68, 88, 95, 82,\n69, 81, 85, 73, 82, 69, 68, 0, 0, 12, 0, 0, 0, 83, 79, 78,\n71, 95, 86, 69, 82, 83, 69, 95, 73, 68, 88, 95, 73, 78,\n86, 65, 76, 73, 68, 0, 0, 13, 0, 0, 0, 83, 79, 78, 71, 95,\n86, 69, 82, 83, 69, 95, 68, 79, 69, 83, 95, 78, 79, 84,\n95, 69, 88, 73, 83, 84, 0, 0, 14, 0, 0, 0, 72, 101, 108,\n108, 111, 82, 101, 113, 117, 101, 115, 116, 0, 2, 0, 5, 0,\n0, 0, 2, 110, 97, 109, 101, 0, 245, 255, 255, 255, 0, 1,\n117, 105, 100, 0, 245, 255, 255, 255, 0, 2, 83, 101, 115,\n115, 105, 111, 110, 67, 114, 101, 97, 116, 101, 0, 1, 0,\n0, 0, 0, 0, 0, 1, 0, 83, 101, 115, 115, 105, 111, 110, 68,\n101, 108, 101, 116, 101, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 83,\n101, 115, 115, 105, 111, 110, 74, 111, 105, 110, 0, 1, 0,\n0, 4, 0, 0, 0, 0, 1, 105, 100, 0, 245, 255, 255, 255, 0,\n83, 101, 115, 115, 105, 111, 110, 76, 101, 97, 118, 101,\n0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 83, 101, 115, 115, 105, 111,\n110, 71, 101, 116, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 83, 112,\n114, 101, 97, 100, 83, 111, 110, 103, 86, 101, 114, 115,\n101, 0, 1, 0, 0, 5, 0, 0, 0, 0, 2, 115, 111, 110, 103, 72,\n97, 115, 104, 0, 245, 255, 255, 255, 0, 118, 101, 114,\n115, 101, 73, 100, 120, 0, 254, 255, 255, 255, 0, 67, 111,\n109, 109, 97, 110, 100, 0, 3, 0, 5, 0, 0, 0, 7, 1, 5, 0,\n0, 0, 2, 6, 0, 0, 0, 3, 7, 0, 0, 0, 4, 8, 0, 0, 0, 5, 9,\n0, 0, 0, 6, 10, 0, 0, 0, 7, 11, 0, 0, 0, 69, 114, 114,\n111, 114, 77, 101, 115, 115, 97, 103, 101, 0, 1, 0, 0, 4,\n0, 0, 0, 1, 1, 99, 111, 100, 101, 0, 4, 0, 0, 0, 0, 72,\n101, 108, 108, 111, 82, 101, 115, 112, 111, 110, 115, 101,\n0, 1, 0, 0, 4, 0, 0, 0, 0, 1, 117, 105, 100, 0, 245, 255,\n255, 255, 0, 83, 101, 115, 115, 105, 111, 110, 68, 101,\n116, 97, 105, 108, 115, 0, 1, 0, 0, 16, 0, 0, 0, 0, 3,\n105, 100, 0, 245, 255, 255, 255, 0, 101, 120, 112, 105,\n114, 101, 115, 0, 243, 255, 255, 255, 0, 109, 101, 109,\n98, 101, 114, 115, 0, 242, 255, 255, 255, 0, 2, 0, 0, 0,\n0, 83, 101, 115, 115, 105, 111, 110, 68, 101, 108, 101,\n116, 101, 100, 0, 1, 0, 0, 4, 0, 0, 0, 1, 1, 114, 101, 97,\n115, 111, 110, 0, 3, 0, 0, 0, 0, 67, 117, 114, 114, 101,\n110, 116, 83, 111, 110, 103, 86, 101, 114, 115, 101, 0, 1,\n0, 0, 5, 0, 0, 0, 0, 2, 115, 111, 110, 103, 72, 97, 115,\n104, 0, 245, 255, 255, 255, 0, 118, 101, 114, 115, 101,\n73, 100, 120, 0, 254, 255, 255, 255, 0, 77, 101, 115, 115,\n97, 103, 101, 0, 3, 0, 9, 0, 0, 0, 5, 1, 13, 0, 0, 0, 2,\n14, 0, 0, 0, 3, 15, 0, 0, 0, 4, 16, 0, 0, 0, 5, 17, 0, 0,\n0, 0, 0, 0, 0\n]);\n\nexport interface IUser extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class User implements IUser {\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IUser) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return User.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IUser): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    User.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link User}.\n   */\n  public static validateCompatibility(record: IUser): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link User} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IUser {\n      return new User(record);\n  }\n\n  /**\n   * Creates a new {@link User} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IUser {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`User.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    User.validateCompatibility(parsed);\n    return User.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return User.encode(this);\n  }\n\n  public static encode(record: IUser): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    User.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IUser, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IUser {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return User.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IUser {\n    let message: IUser = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new User(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new User(message);\n      }\n    }\n  }\n}\n\n\nexport enum SessionMemberRole {\n\n  Creator = 1,\n\n  Member = 2,\n}\n\n\nexport interface ISessionMember extends BebopRecord {\n\n  readonly user: IUser;\n\n  readonly role: SessionMemberRole;\n}\n\nexport class SessionMember implements ISessionMember {\n  public readonly user: IUser;\n  public readonly role: SessionMemberRole;\n\n  constructor(record: ISessionMember) {\n    this.user = record.user;\n    this.role = record.role;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionMember.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionMember): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionMember.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionMember}.\n   */\n  public static validateCompatibility(record: ISessionMember): void {\n    User.validateCompatibility(record.user);\n    BebopTypeGuard.ensureEnum(record.role, SessionMemberRole);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionMember} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionMember {\n      record.user = User.unsafeCast(record.user);\n      return new SessionMember(record);\n  }\n\n  /**\n   * Creates a new {@link SessionMember} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionMember {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionMember.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionMember.validateCompatibility(parsed);\n    return SessionMember.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionMember.encode(this);\n  }\n\n  public static encode(record: ISessionMember): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionMember.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionMember, view: BebopView): number {\n    const before = view.length;\n    User.encodeInto(record.user, view)\n    view.writeUint32(record.role);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionMember {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionMember.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionMember {\n    let field0: IUser;\n    field0 = User.readFrom(view);\n    let field1: SessionMemberRole;\n    field1 = view.readUint32() as SessionMemberRole;\n    let message: ISessionMember = {\n      user: field0,\n      role: field1,\n    };\n    return new SessionMember(message);\n  }\n}\n\n\nexport enum SessionDeleteReason {\n\n  Expired = 1,\n\n  CreatorsDecision = 2,\n\n  UserLeft = 3,\n}\n\n\nexport enum ErrorCode {\n\n  Unknown = 1,\n\n  InvalidCommand = 2,\n\n  SessionNotFound = 3,\n\n  SessionIdRequired = 4,\n\n  SessionYouHaveOne = 5,\n\n  SessionYouHaveNone = 6,\n\n  SessionYouAreNotCreator = 7,\n\n  SessionYouAreNotMember = 8,\n\n  SessionCannotLeaveAsCreator = 9,\n\n  SongNotFound = 10,\n\n  SongHashRequired = 11,\n\n  SongVerseIdxRequired = 12,\n\n  SongVerseIdxInvalid = 13,\n\n  SongVerseDoesNotExist = 14,\n}\n\n\nexport interface IHelloRequest extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class HelloRequest implements IHelloRequest {\n  public readonly discriminator: number = 1 as 1;\n  public static readonly discriminator: number = 1 as 1;\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IHelloRequest) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return HelloRequest.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IHelloRequest): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    HelloRequest.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link HelloRequest}.\n   */\n  public static validateCompatibility(record: IHelloRequest): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link HelloRequest} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IHelloRequest {\n      return new HelloRequest(record);\n  }\n\n  /**\n   * Creates a new {@link HelloRequest} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IHelloRequest {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`HelloRequest.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    HelloRequest.validateCompatibility(parsed);\n    return HelloRequest.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return HelloRequest.encode(this);\n  }\n\n  public static encode(record: IHelloRequest): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    HelloRequest.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IHelloRequest, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IHelloRequest {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return HelloRequest.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IHelloRequest {\n    let message: IHelloRequest = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new HelloRequest(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new HelloRequest(message);\n      }\n    }\n  }\n}\n\n\nexport interface ISessionCreate extends BebopRecord {\n}\n\nexport class SessionCreate implements ISessionCreate {\n  public readonly discriminator: number = 2 as 2;\n  public static readonly discriminator: number = 2 as 2;\n\n  constructor(record: ISessionCreate) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionCreate.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionCreate): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionCreate.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionCreate}.\n   */\n  public static validateCompatibility(record: ISessionCreate): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionCreate} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionCreate {\n      return new SessionCreate(record);\n  }\n\n  /**\n   * Creates a new {@link SessionCreate} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionCreate {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionCreate.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionCreate.validateCompatibility(parsed);\n    return SessionCreate.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionCreate.encode(this);\n  }\n\n  public static encode(record: ISessionCreate): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionCreate.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionCreate, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionCreate {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionCreate.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionCreate {\n    let message: ISessionCreate = {\n    };\n    return new SessionCreate(message);\n  }\n}\n\n\nexport interface ISessionDelete extends BebopRecord {\n}\n\nexport class SessionDelete implements ISessionDelete {\n  public readonly discriminator: number = 3 as 3;\n  public static readonly discriminator: number = 3 as 3;\n\n  constructor(record: ISessionDelete) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionDelete.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionDelete): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionDelete.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionDelete}.\n   */\n  public static validateCompatibility(record: ISessionDelete): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionDelete} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionDelete {\n      return new SessionDelete(record);\n  }\n\n  /**\n   * Creates a new {@link SessionDelete} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionDelete {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionDelete.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionDelete.validateCompatibility(parsed);\n    return SessionDelete.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionDelete.encode(this);\n  }\n\n  public static encode(record: ISessionDelete): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionDelete.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionDelete, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionDelete {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionDelete.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionDelete {\n    let message: ISessionDelete = {\n    };\n    return new SessionDelete(message);\n  }\n}\n\n\nexport interface ISessionJoin extends BebopRecord {\n\n  readonly id: string;\n}\n\nexport class SessionJoin implements ISessionJoin {\n  public readonly discriminator: number = 4 as 4;\n  public static readonly discriminator: number = 4 as 4;\n  public readonly id: string;\n\n  constructor(record: ISessionJoin) {\n    this.id = record.id;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionJoin.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionJoin): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionJoin.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionJoin}.\n   */\n  public static validateCompatibility(record: ISessionJoin): void {\n    BebopTypeGuard.ensureString(record.id)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionJoin} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionJoin {\n      return new SessionJoin(record);\n  }\n\n  /**\n   * Creates a new {@link SessionJoin} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionJoin {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionJoin.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionJoin.validateCompatibility(parsed);\n    return SessionJoin.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionJoin.encode(this);\n  }\n\n  public static encode(record: ISessionJoin): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionJoin.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionJoin, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.id);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionJoin {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionJoin.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionJoin {\n    let field0: string;\n    field0 = view.readString();\n    let message: ISessionJoin = {\n      id: field0,\n    };\n    return new SessionJoin(message);\n  }\n}\n\n\nexport interface ISessionLeave extends BebopRecord {\n}\n\nexport class SessionLeave implements ISessionLeave {\n  public readonly discriminator: number = 5 as 5;\n  public static readonly discriminator: number = 5 as 5;\n\n  constructor(record: ISessionLeave) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionLeave.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionLeave): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionLeave.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionLeave}.\n   */\n  public static validateCompatibility(record: ISessionLeave): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionLeave} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionLeave {\n      return new SessionLeave(record);\n  }\n\n  /**\n   * Creates a new {@link SessionLeave} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionLeave {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionLeave.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionLeave.validateCompatibility(parsed);\n    return SessionLeave.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionLeave.encode(this);\n  }\n\n  public static encode(record: ISessionLeave): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionLeave.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionLeave, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionLeave {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionLeave.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionLeave {\n    let message: ISessionLeave = {\n    };\n    return new SessionLeave(message);\n  }\n}\n\n\nexport interface ISessionGet extends BebopRecord {\n}\n\nexport class SessionGet implements ISessionGet {\n  public readonly discriminator: number = 6 as 6;\n  public static readonly discriminator: number = 6 as 6;\n\n  constructor(record: ISessionGet) {\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionGet.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionGet): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionGet.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionGet}.\n   */\n  public static validateCompatibility(record: ISessionGet): void {\n\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionGet} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionGet {\n      return new SessionGet(record);\n  }\n\n  /**\n   * Creates a new {@link SessionGet} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionGet {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionGet.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionGet.validateCompatibility(parsed);\n    return SessionGet.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionGet.encode(this);\n  }\n\n  public static encode(record: ISessionGet): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionGet.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionGet, view: BebopView): number {\n    const before = view.length;\n\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionGet {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionGet.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionGet {\n    let message: ISessionGet = {\n    };\n    return new SessionGet(message);\n  }\n}\n\n\nexport interface ISpreadSongVerse extends BebopRecord {\n\n  readonly songHash: string;\n\n  readonly verseIdx: number;\n}\n\nexport class SpreadSongVerse implements ISpreadSongVerse {\n  public readonly discriminator: number = 7 as 7;\n  public static readonly discriminator: number = 7 as 7;\n  public readonly songHash: string;\n  public readonly verseIdx: number;\n\n  constructor(record: ISpreadSongVerse) {\n    this.songHash = record.songHash;\n    this.verseIdx = record.verseIdx;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SpreadSongVerse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISpreadSongVerse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SpreadSongVerse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SpreadSongVerse}.\n   */\n  public static validateCompatibility(record: ISpreadSongVerse): void {\n    BebopTypeGuard.ensureString(record.songHash)\n    BebopTypeGuard.ensureUint8(record.verseIdx)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SpreadSongVerse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISpreadSongVerse {\n      return new SpreadSongVerse(record);\n  }\n\n  /**\n   * Creates a new {@link SpreadSongVerse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISpreadSongVerse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SpreadSongVerse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SpreadSongVerse.validateCompatibility(parsed);\n    return SpreadSongVerse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SpreadSongVerse.encode(this);\n  }\n\n  public static encode(record: ISpreadSongVerse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SpreadSongVerse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISpreadSongVerse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.songHash);\n    view.writeByte(record.verseIdx);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISpreadSongVerse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SpreadSongVerse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISpreadSongVerse {\n    let field0: string;\n    field0 = view.readString();\n    let field1: number;\n    field1 = view.readByte();\n    let message: ISpreadSongVerse = {\n      songHash: field0,\n      verseIdx: field1,\n    };\n    return new SpreadSongVerse(message);\n  }\n}\n\n\nexport type ICommandType\n  = { discriminator: 1, value: IHelloRequest }\n  | { discriminator: 2, value: ISessionCreate }\n  | { discriminator: 3, value: ISessionDelete }\n  | { discriminator: 4, value: ISessionJoin }\n  | { discriminator: 5, value: ISessionLeave }\n  | { discriminator: 6, value: ISessionGet }\n  | { discriminator: 7, value: ISpreadSongVerse };\n\nexport interface ICommand extends BebopRecord {\n  readonly data: ICommandType;\n}\nexport class Command implements ICommand {\n\n  public readonly data: ICommandType;\n\n  private constructor(data: ICommandType) {\n    this.data = data;\n  }\n\n  public get discriminator() {\n    return this.data.discriminator;\n  }\n\n  public get value() {\n    return this.data.value;\n  }\n\n  public static fromHelloRequest(value: IHelloRequest) {\n    return new Command({ discriminator: 1, value: new HelloRequest(value)});\n  }\n\n  public isHelloRequest(): this is { value: HelloRequest } & { data: Extract<ICommandType, { discriminator: 1 }> } {\n    return this.data.value instanceof HelloRequest;\n  }\n\n  public static fromSessionCreate(value: ISessionCreate) {\n    return new Command({ discriminator: 2, value: new SessionCreate(value)});\n  }\n\n  public isSessionCreate(): this is { value: SessionCreate } & { data: Extract<ICommandType, { discriminator: 2 }> } {\n    return this.data.value instanceof SessionCreate;\n  }\n\n  public static fromSessionDelete(value: ISessionDelete) {\n    return new Command({ discriminator: 3, value: new SessionDelete(value)});\n  }\n\n  public isSessionDelete(): this is { value: SessionDelete } & { data: Extract<ICommandType, { discriminator: 3 }> } {\n    return this.data.value instanceof SessionDelete;\n  }\n\n  public static fromSessionJoin(value: ISessionJoin) {\n    return new Command({ discriminator: 4, value: new SessionJoin(value)});\n  }\n\n  public isSessionJoin(): this is { value: SessionJoin } & { data: Extract<ICommandType, { discriminator: 4 }> } {\n    return this.data.value instanceof SessionJoin;\n  }\n\n  public static fromSessionLeave(value: ISessionLeave) {\n    return new Command({ discriminator: 5, value: new SessionLeave(value)});\n  }\n\n  public isSessionLeave(): this is { value: SessionLeave } & { data: Extract<ICommandType, { discriminator: 5 }> } {\n    return this.data.value instanceof SessionLeave;\n  }\n\n  public static fromSessionGet(value: ISessionGet) {\n    return new Command({ discriminator: 6, value: new SessionGet(value)});\n  }\n\n  public isSessionGet(): this is { value: SessionGet } & { data: Extract<ICommandType, { discriminator: 6 }> } {\n    return this.data.value instanceof SessionGet;\n  }\n\n  public static fromSpreadSongVerse(value: ISpreadSongVerse) {\n    return new Command({ discriminator: 7, value: new SpreadSongVerse(value)});\n  }\n\n  public isSpreadSongVerse(): this is { value: SpreadSongVerse } & { data: Extract<ICommandType, { discriminator: 7 }> } {\n    return this.data.value instanceof SpreadSongVerse;\n  }\n\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Command.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICommand): string {\n    delete (record.data.value as any).discriminator;\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Command.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Command}.\n   */\n  public static validateCompatibility(record: ICommand): void {\n    const discriminator = record.data.discriminator;\n    BebopTypeGuard.ensureUint8(discriminator);\n    switch (discriminator) {\n      case 1: {\n        HelloRequest.validateCompatibility(record.data.value);\n        break;\n      }\n      case 2: {\n        SessionCreate.validateCompatibility(record.data.value);\n        break;\n      }\n      case 3: {\n        SessionDelete.validateCompatibility(record.data.value);\n        break;\n      }\n      case 4: {\n        SessionJoin.validateCompatibility(record.data.value);\n        break;\n      }\n      case 5: {\n        SessionLeave.validateCompatibility(record.data.value);\n        break;\n      }\n      case 6: {\n        SessionGet.validateCompatibility(record.data.value);\n        break;\n      }\n      case 7: {\n        SpreadSongVerse.validateCompatibility(record.data.value);\n        break;\n      }\n      default: {\n        throw new Error(`Unknown discriminator for Command: ${discriminator}`);\n      }\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Command} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): Command {\n      const discriminator = record.data.discriminator;\n      switch (discriminator) {\n        case 1: {\n          return new Command({ discriminator: 1, value: HelloRequest.unsafeCast(record.value) });\n        }\n        case 2: {\n          return new Command({ discriminator: 2, value: SessionCreate.unsafeCast(record.value) });\n        }\n        case 3: {\n          return new Command({ discriminator: 3, value: SessionDelete.unsafeCast(record.value) });\n        }\n        case 4: {\n          return new Command({ discriminator: 4, value: SessionJoin.unsafeCast(record.value) });\n        }\n        case 5: {\n          return new Command({ discriminator: 5, value: SessionLeave.unsafeCast(record.value) });\n        }\n        case 6: {\n          return new Command({ discriminator: 6, value: SessionGet.unsafeCast(record.value) });\n        }\n        case 7: {\n          return new Command({ discriminator: 7, value: SpreadSongVerse.unsafeCast(record.value) });\n        }\n      }\n      throw new BebopRuntimeError(`Failed to unsafely cast union from discriminator: ${discriminator}`);\n  }\n\n  /**\n   * Creates a new {@link Command} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): Command {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Command.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Command.validateCompatibility(parsed);\n    return Command.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Command.encode(this);\n  }\n\n  public static encode(record: ICommand): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Command.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICommand, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length + 1;\n    view.writeByte(record.data.discriminator);\n    switch (record.data.discriminator) {\n      case 1:\n        HelloRequest.encodeInto(record.data.value, view);\n        break;\n      case 2:\n        SessionCreate.encodeInto(record.data.value, view);\n        break;\n      case 3:\n        SessionDelete.encodeInto(record.data.value, view);\n        break;\n      case 4:\n        SessionJoin.encodeInto(record.data.value, view);\n        break;\n      case 5:\n        SessionLeave.encodeInto(record.data.value, view);\n        break;\n      case 6:\n        SessionGet.encodeInto(record.data.value, view);\n        break;\n      case 7:\n        SpreadSongVerse.encodeInto(record.data.value, view);\n        break;\n    }\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): Command {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Command.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): Command {\n    const length = view.readMessageLength();\n    const end = view.index + 1 + length;\n    switch (view.readByte()) {\n      case 1:\n        return this.fromHelloRequest(HelloRequest.readFrom(view));\n      case 2:\n        return this.fromSessionCreate(SessionCreate.readFrom(view));\n      case 3:\n        return this.fromSessionDelete(SessionDelete.readFrom(view));\n      case 4:\n        return this.fromSessionJoin(SessionJoin.readFrom(view));\n      case 5:\n        return this.fromSessionLeave(SessionLeave.readFrom(view));\n      case 6:\n        return this.fromSessionGet(SessionGet.readFrom(view));\n      case 7:\n        return this.fromSpreadSongVerse(SpreadSongVerse.readFrom(view));\n      default:\n        view.index = end;\n        throw new BebopRuntimeError(\"Unrecognized discriminator while decoding Command\");\n    }\n  }\n}\n\n\nexport interface IErrorMessage extends BebopRecord {\n\n  readonly code: ErrorCode;\n}\n\nexport class ErrorMessage implements IErrorMessage {\n  public readonly discriminator: number = 1 as 1;\n  public static readonly discriminator: number = 1 as 1;\n  public readonly code: ErrorCode;\n\n  constructor(record: IErrorMessage) {\n    this.code = record.code;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return ErrorMessage.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IErrorMessage): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    ErrorMessage.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link ErrorMessage}.\n   */\n  public static validateCompatibility(record: IErrorMessage): void {\n    BebopTypeGuard.ensureEnum(record.code, ErrorCode);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link ErrorMessage} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IErrorMessage {\n      return new ErrorMessage(record);\n  }\n\n  /**\n   * Creates a new {@link ErrorMessage} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IErrorMessage {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`ErrorMessage.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    ErrorMessage.validateCompatibility(parsed);\n    return ErrorMessage.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return ErrorMessage.encode(this);\n  }\n\n  public static encode(record: IErrorMessage): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    ErrorMessage.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IErrorMessage, view: BebopView): number {\n    const before = view.length;\n    view.writeUint32(record.code);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IErrorMessage {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return ErrorMessage.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IErrorMessage {\n    let field0: ErrorCode;\n    field0 = view.readUint32() as ErrorCode;\n    let message: IErrorMessage = {\n      code: field0,\n    };\n    return new ErrorMessage(message);\n  }\n}\n\n\nexport interface IHelloResponse extends BebopRecord {\n\n  readonly uid: string;\n}\n\nexport class HelloResponse implements IHelloResponse {\n  public readonly discriminator: number = 2 as 2;\n  public static readonly discriminator: number = 2 as 2;\n  public readonly uid: string;\n\n  constructor(record: IHelloResponse) {\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return HelloResponse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IHelloResponse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    HelloResponse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link HelloResponse}.\n   */\n  public static validateCompatibility(record: IHelloResponse): void {\n    BebopTypeGuard.ensureString(record.uid)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link HelloResponse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IHelloResponse {\n      return new HelloResponse(record);\n  }\n\n  /**\n   * Creates a new {@link HelloResponse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IHelloResponse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`HelloResponse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    HelloResponse.validateCompatibility(parsed);\n    return HelloResponse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return HelloResponse.encode(this);\n  }\n\n  public static encode(record: IHelloResponse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    HelloResponse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IHelloResponse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.uid);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IHelloResponse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return HelloResponse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IHelloResponse {\n    let field0: string;\n    field0 = view.readString();\n    let message: IHelloResponse = {\n      uid: field0,\n    };\n    return new HelloResponse(message);\n  }\n}\n\n\nexport interface ISessionDetails extends BebopRecord {\n\n  readonly id: string;\n\n  readonly expires: Date;\n\n  readonly members: Array<ISessionMember>;\n}\n\nexport class SessionDetails implements ISessionDetails {\n  public readonly discriminator: number = 3 as 3;\n  public static readonly discriminator: number = 3 as 3;\n  public readonly id: string;\n  public readonly expires: Date;\n  public readonly members: Array<ISessionMember>;\n\n  constructor(record: ISessionDetails) {\n    this.id = record.id;\n    this.expires = record.expires;\n    this.members = record.members;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionDetails.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionDetails): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionDetails.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionDetails}.\n   */\n  public static validateCompatibility(record: ISessionDetails): void {\n    BebopTypeGuard.ensureString(record.id)\n    BebopTypeGuard.ensureDate(record.expires)\n    BebopTypeGuard.ensureArray(record.members, SessionMember.validateCompatibility);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionDetails} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionDetails {\n      return new SessionDetails(record);\n  }\n\n  /**\n   * Creates a new {@link SessionDetails} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionDetails {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionDetails.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionDetails.validateCompatibility(parsed);\n    return SessionDetails.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionDetails.encode(this);\n  }\n\n  public static encode(record: ISessionDetails): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionDetails.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionDetails, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.id);\n    view.writeDate(record.expires);\n    {\n      const length0 = record.members.length;\n      view.writeUint32(length0);\n      for (let i0 = 0; i0 < length0; i0++) {\n        SessionMember.encodeInto(record.members[i0], view)\n      }\n    }\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionDetails {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionDetails.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionDetails {\n    let field0: string;\n    field0 = view.readString();\n    let field1: Date;\n    field1 = view.readDate();\n    let field2: Array<ISessionMember>;\n    {\n      let length0 = view.readUint32();\n      field2 = new Array<ISessionMember>(length0);\n      for (let i0 = 0; i0 < length0; i0++) {\n        let x0: ISessionMember;\n        x0 = SessionMember.readFrom(view);\n        field2[i0] = x0;\n      }\n    }\n    let message: ISessionDetails = {\n      id: field0,\n      expires: field1,\n      members: field2,\n    };\n    return new SessionDetails(message);\n  }\n}\n\n\nexport interface ISessionDeleted extends BebopRecord {\n\n  readonly reason: SessionDeleteReason;\n}\n\nexport class SessionDeleted implements ISessionDeleted {\n  public readonly discriminator: number = 4 as 4;\n  public static readonly discriminator: number = 4 as 4;\n  public readonly reason: SessionDeleteReason;\n\n  constructor(record: ISessionDeleted) {\n    this.reason = record.reason;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SessionDeleted.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISessionDeleted): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SessionDeleted.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SessionDeleted}.\n   */\n  public static validateCompatibility(record: ISessionDeleted): void {\n    BebopTypeGuard.ensureEnum(record.reason, SessionDeleteReason);\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SessionDeleted} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISessionDeleted {\n      return new SessionDeleted(record);\n  }\n\n  /**\n   * Creates a new {@link SessionDeleted} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISessionDeleted {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SessionDeleted.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SessionDeleted.validateCompatibility(parsed);\n    return SessionDeleted.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SessionDeleted.encode(this);\n  }\n\n  public static encode(record: ISessionDeleted): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SessionDeleted.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISessionDeleted, view: BebopView): number {\n    const before = view.length;\n    view.writeUint32(record.reason);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISessionDeleted {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SessionDeleted.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISessionDeleted {\n    let field0: SessionDeleteReason;\n    field0 = view.readUint32() as SessionDeleteReason;\n    let message: ISessionDeleted = {\n      reason: field0,\n    };\n    return new SessionDeleted(message);\n  }\n}\n\n\nexport interface ICurrentSongVerse extends BebopRecord {\n\n  readonly songHash: string;\n\n  readonly verseIdx: number;\n}\n\nexport class CurrentSongVerse implements ICurrentSongVerse {\n  public readonly discriminator: number = 5 as 5;\n  public static readonly discriminator: number = 5 as 5;\n  public readonly songHash: string;\n  public readonly verseIdx: number;\n\n  constructor(record: ICurrentSongVerse) {\n    this.songHash = record.songHash;\n    this.verseIdx = record.verseIdx;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return CurrentSongVerse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICurrentSongVerse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    CurrentSongVerse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link CurrentSongVerse}.\n   */\n  public static validateCompatibility(record: ICurrentSongVerse): void {\n    BebopTypeGuard.ensureString(record.songHash)\n    BebopTypeGuard.ensureUint8(record.verseIdx)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link CurrentSongVerse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ICurrentSongVerse {\n      return new CurrentSongVerse(record);\n  }\n\n  /**\n   * Creates a new {@link CurrentSongVerse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ICurrentSongVerse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`CurrentSongVerse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    CurrentSongVerse.validateCompatibility(parsed);\n    return CurrentSongVerse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return CurrentSongVerse.encode(this);\n  }\n\n  public static encode(record: ICurrentSongVerse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    CurrentSongVerse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICurrentSongVerse, view: BebopView): number {\n    const before = view.length;\n    view.writeString(record.songHash);\n    view.writeByte(record.verseIdx);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ICurrentSongVerse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return CurrentSongVerse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ICurrentSongVerse {\n    let field0: string;\n    field0 = view.readString();\n    let field1: number;\n    field1 = view.readByte();\n    let message: ICurrentSongVerse = {\n      songHash: field0,\n      verseIdx: field1,\n    };\n    return new CurrentSongVerse(message);\n  }\n}\n\n\nexport type IMessageType\n  = { discriminator: 1, value: IErrorMessage }\n  | { discriminator: 2, value: IHelloResponse }\n  | { discriminator: 3, value: ISessionDetails }\n  | { discriminator: 4, value: ISessionDeleted }\n  | { discriminator: 5, value: ICurrentSongVerse };\n\nexport interface IMessage extends BebopRecord {\n  readonly data: IMessageType;\n}\nexport class Message implements IMessage {\n\n  public readonly data: IMessageType;\n\n  private constructor(data: IMessageType) {\n    this.data = data;\n  }\n\n  public get discriminator() {\n    return this.data.discriminator;\n  }\n\n  public get value() {\n    return this.data.value;\n  }\n\n  public static fromErrorMessage(value: IErrorMessage) {\n    return new Message({ discriminator: 1, value: new ErrorMessage(value)});\n  }\n\n  public isErrorMessage(): this is { value: ErrorMessage } & { data: Extract<IMessageType, { discriminator: 1 }> } {\n    return this.data.value instanceof ErrorMessage;\n  }\n\n  public static fromHelloResponse(value: IHelloResponse) {\n    return new Message({ discriminator: 2, value: new HelloResponse(value)});\n  }\n\n  public isHelloResponse(): this is { value: HelloResponse } & { data: Extract<IMessageType, { discriminator: 2 }> } {\n    return this.data.value instanceof HelloResponse;\n  }\n\n  public static fromSessionDetails(value: ISessionDetails) {\n    return new Message({ discriminator: 3, value: new SessionDetails(value)});\n  }\n\n  public isSessionDetails(): this is { value: SessionDetails } & { data: Extract<IMessageType, { discriminator: 3 }> } {\n    return this.data.value instanceof SessionDetails;\n  }\n\n  public static fromSessionDeleted(value: ISessionDeleted) {\n    return new Message({ discriminator: 4, value: new SessionDeleted(value)});\n  }\n\n  public isSessionDeleted(): this is { value: SessionDeleted } & { data: Extract<IMessageType, { discriminator: 4 }> } {\n    return this.data.value instanceof SessionDeleted;\n  }\n\n  public static fromCurrentSongVerse(value: ICurrentSongVerse) {\n    return new Message({ discriminator: 5, value: new CurrentSongVerse(value)});\n  }\n\n  public isCurrentSongVerse(): this is { value: CurrentSongVerse } & { data: Extract<IMessageType, { discriminator: 5 }> } {\n    return this.data.value instanceof CurrentSongVerse;\n  }\n\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Message.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IMessage): string {\n    delete (record.data.value as any).discriminator;\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Message.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Message}.\n   */\n  public static validateCompatibility(record: IMessage): void {\n    const discriminator = record.data.discriminator;\n    BebopTypeGuard.ensureUint8(discriminator);\n    switch (discriminator) {\n      case 1: {\n        ErrorMessage.validateCompatibility(record.data.value);\n        break;\n      }\n      case 2: {\n        HelloResponse.validateCompatibility(record.data.value);\n        break;\n      }\n      case 3: {\n        SessionDetails.validateCompatibility(record.data.value);\n        break;\n      }\n      case 4: {\n        SessionDeleted.validateCompatibility(record.data.value);\n        break;\n      }\n      case 5: {\n        CurrentSongVerse.validateCompatibility(record.data.value);\n        break;\n      }\n      default: {\n        throw new Error(`Unknown discriminator for Message: ${discriminator}`);\n      }\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Message} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): Message {\n      const discriminator = record.data.discriminator;\n      switch (discriminator) {\n        case 1: {\n          return new Message({ discriminator: 1, value: ErrorMessage.unsafeCast(record.value) });\n        }\n        case 2: {\n          return new Message({ discriminator: 2, value: HelloResponse.unsafeCast(record.value) });\n        }\n        case 3: {\n          return new Message({ discriminator: 3, value: SessionDetails.unsafeCast(record.value) });\n        }\n        case 4: {\n          return new Message({ discriminator: 4, value: SessionDeleted.unsafeCast(record.value) });\n        }\n        case 5: {\n          return new Message({ discriminator: 5, value: CurrentSongVerse.unsafeCast(record.value) });\n        }\n      }\n      throw new BebopRuntimeError(`Failed to unsafely cast union from discriminator: ${discriminator}`);\n  }\n\n  /**\n   * Creates a new {@link Message} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): Message {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Message.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Message.validateCompatibility(parsed);\n    return Message.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Message.encode(this);\n  }\n\n  public static encode(record: IMessage): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Message.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IMessage, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length + 1;\n    view.writeByte(record.data.discriminator);\n    switch (record.data.discriminator) {\n      case 1:\n        ErrorMessage.encodeInto(record.data.value, view);\n        break;\n      case 2:\n        HelloResponse.encodeInto(record.data.value, view);\n        break;\n      case 3:\n        SessionDetails.encodeInto(record.data.value, view);\n        break;\n      case 4:\n        SessionDeleted.encodeInto(record.data.value, view);\n        break;\n      case 5:\n        CurrentSongVerse.encodeInto(record.data.value, view);\n        break;\n    }\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): Message {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Message.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): Message {\n    const length = view.readMessageLength();\n    const end = view.index + 1 + length;\n    switch (view.readByte()) {\n      case 1:\n        return this.fromErrorMessage(ErrorMessage.readFrom(view));\n      case 2:\n        return this.fromHelloResponse(HelloResponse.readFrom(view));\n      case 3:\n        return this.fromSessionDetails(SessionDetails.readFrom(view));\n      case 4:\n        return this.fromSessionDeleted(SessionDeleted.readFrom(view));\n      case 5:\n        return this.fromCurrentSongVerse(CurrentSongVerse.readFrom(view));\n      default:\n        view.index = end;\n        throw new BebopRuntimeError(\"Unrecognized discriminator while decoding Message\");\n    }\n  }\n}\n\n"]}